1. Nicholas Chandler
2. I believe my code works in most cases with properly processed text input data. One case I am certain will return <fail> is when the training data is too small. ie.) the only time </s> appears is after the word velociraptor.
3. There are definitely inefficiencies within the program as I have a few nested for loops and things of that nature. To me it seems to be relatively space efficient aside from the necessary HashMaps and ArrayLists. 
4. First and foremost, I calculated the proper counts and probabilities by hand and compared them ot the program's output. Then I tested the program with several characters. I had a dynamic approach to testing, changing what bugs were being targeted and thereby manipulating parts of the program to express said bugs. After I was able to get output, there were several cases which caused <fail> tokens to be output improperly. For example, the <s> token as a starter for ngrams. I had to go through the file I/O first to make sure it was reading properly, then I checked the output writer methods. Finally, I had the program output the probabilities associated with each ngram. I realized it was halving them for order 2 ngrams starting with the <s> token. I then concluded that the historyCounts was double counting them in its creation stage so I imposed a more restrictive collection process.
5. The most challenging part of this program was remembering java. I have become a stronger student since my first experience with java however, figuring out how classes and methods worked again was a bit challenging. More specifically to this assignment, I found the creation of the indexes pretty challenging. I hope to become stronger with algorithmic thinking as well as programming through the course of this class.
